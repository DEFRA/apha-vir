@model IsolateRelocationViewModel
@{
    ViewData["Title"] = "Virus Isolate Relocation | Virus Isolates Repository";
}
<p>Please specify the criteria you wish to use to search for isolates:</p>
<div class="d-flex" style="font-size:small">
    <div class="search-criteria flex-grow-1 me-3" style="width: 500px;">

        <div class="form-group row mb-0" style="width:85%;">
            <div class="col-sm-3">
                <label for="MinimumAVNumber" style="white-space: nowrap;">AV Number or AV Number Range</label>
            </div>
            <div class="col-sm-3">
                <label for="MinimumAVNumber">Min AV Number or Single:</label>
                <input type="text" id="MinimumAVNumber" asp-for="MinAVNumber" class="d-block w-250" />
            </div>
        </div>
        <div class="form-group row mb-0" style="width:85%;">
            <div class="col-sm-3">
            </div>
            <div class="col-sm-3">
                <label for="MinimumAVNumber">Max AV Number:</label>
                <input type="text" id="MaximumAVNumber" asp-for="MaxAVNumber" class="d-block w-250" />
            </div>
        </div>
        <div class="form-group row mb-0 mt-2" style="width:85%;">
            <div class="col-sm-3">
                <label for="Freezer&Tray" style="white-space: nowrap;">Freezer & Tray</label>
            </div>
            <div class="col-sm-3">
                <label for="SelectedFreezer">Freezer</label>
                <select id="FreezerSearch" asp-for="SelectedFreezer" asp-items="Model.FreezersList" class="d-block w-250" asp-option-label="Select Freezer">
                    <option value=""></option>
                </select>
            </div>
            <div class="col-sm-3" style="width:60px"></div>
            <div id="divNewFreezer" class="col-sm-3" style="width:400px;display: none;">
                <label for="NewlocationfortheselectedIsolates" style="white-space: nowrap;"> New location for the selected Isolates </label>
                <div class="d-flex align-items-center">
                    <label for="NewFreezer" class="me-2 mb-0">Freezer</label>
                    <img src="~\Images\spacer.gif" width="31px" height="5" alt="">
                    <select id="NewFreezer" asp-for="SelectedNewFreezer" asp-items="Model.FreezersList" class="w-250 d-inline-block align-middle me-3" asp-option-label="Select Freezer">
                        <option value=""></option>
                    </select>
                </div>
            </div>
        </div>

        <div class="form-group row mb-0" style="width:85%;">
            <div class="col-sm-3">
            </div>
            <div class="col-sm-3">
                <label for="FreezerSearch">Tray</label>
                <select id="TraySearch" asp-for="SelectedTray" asp-items="Model.TraysList" class="d-block w-250">
                    <option value=""></option>
                </select>
            </div>
            <div class="col-sm-3" style="width:60px"></div>
            <div id="divNewTray" class="col-sm-3" style="width:400px;display: none;">
                <img src="~\Images\spacer.gif" width="200px" height="5" alt="">
                <div class="d-flex align-items-center">
                    <label for="NewTray">Tray</label>
                    <img src="~\Images\spacer.gif" width="60px" height="5" alt="">
                    <select id="NewTray" asp-for="SelectedNewTray" asp-items="Model.TraysList" class="w-250 d-inline-block align-middle me-3">
                        <option value=""></option>
                    </select>
                </div>
                <div style="text-align: right; padding-right: 45px;padding-top: 10px;">
                    <button type="button" id="saveButton" class="btn btn-link isolaterelocate-btn-link-custom">
                        Save
                    </button>
                </div>
            </div>
        </div>
        <div class="form-group row mb-0 mt-4" style="width:85%;">
            <div class="col-sm-3 offset-sm-5">
                <button id="searchButton" class="btn  btn-link isolaterelocate-btn-link-custom">Search</button>
            </div>
        </div>
    </div>
</div>

<div id="updateMessage" class="alert alert-success" style="color: green;font-weight:bold; padding-bottom:10px; display: none;">
    Update successful.
</div>

<div id="validationPanel" style="color:red;font-weight:bold; padding-bottom:10px; display: none;">
    <span>There are validation messages requiring your attention.</span>
    <div id="validationMessage"></div>
</div>

<div class="row">
    <div class="col-sm-12">
        Search Results
    </div>
    <div class="col-sm-12">
        <div class="col-sm-6">           
            <div style="text-align: right;margin-bottom: 5px;">
                <button id="selectAllButton" class="btn btn-link isolaterelocate-btn-link-custom" style="margin-right:10px">Select All</button>
                <button id="unselectAllButton" class="btn btn-link isolaterelocate-btn-link-custom">Unselect All</button>
            </div>
            <div id="noIsolatesMessage" style="margin: 20px 0; border: 1px solid #ccc; border-spacing: 2px; width: fit-content;">
                There are no isolates matching the criteria specified
            </div>
            <table id="isolatesTable" class="IsolateRelocatetable" style="display:none;">
                <thead>
                    <tr>
                        <th>AV Number</th>
                        <th>Nomenclature</th>
                        <th>Freezer</th>
                        <th>Tray</th>
                        <th>Well</th>
                        <th>Select</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                </tbody>
            </table>
        </div>      
        <form id="editForm" method="post" action="/Relocation/Edit">
            <input type="hidden" name="IsolateId" />
            <input type="hidden" name="Well" />
            <input type="hidden" name="Freezer" />
            <input type="hidden" name="Tray" />
            <input type="hidden" name="LastModified" />
       </form>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#FreezerSearch').change(function () {
                updateTrayList('TraySearch', $(this).val());
            });

            $('#NewFreezer').change(function () {
                updateTrayList('NewTray', $(this).val());
            });

            $('#searchButton').click(function () {
                performSearch();
            });

            $('#saveButton').click(function () {
                if (confirm('Please confirm you wish to relocate the selected Isolates')) {
                    saveRelocations();
                }
            });

            $('#selectAllButton').click(function () {
                $('.select-isolate').prop('checked', true);
            });

            $('#unselectAllButton').click(function () {
                $('.select-isolate').prop('checked', false);
            });

            $(document).on('click', '.edit-isolate', function () {
                debugger;
                var button = $(this);
                $('#editForm input[name="IsolateId"]').val(button.data('id'));
                $('#editForm input[name="Well"]').val(button.data('well'));
                $('#editForm input[name="Freezer"]').val(button.data('freezer'));
                $('#editForm input[name="Tray"]').val(button.data('tray'));
                $('#editForm input[name="LastModified"]').val(button.data('lastmodified'));

                $('#editForm').submit();
            });
        });

        function updateTrayList(traySelectId, freezerId) {
            $.ajax({
                url: '/IsolateRelocate/GetTrayList',
                type: 'GET',
                data: { freezerId: freezerId },
                success: function (data) {
                    var traySelect = $('#' + traySelectId);
                    traySelect.empty();
                    traySelect.append($('<option></option>').val('').text('Select Tray'));
                    $.each(data, function (i, item) {
                        traySelect.append($('<option></option>').val(item.value).text(item.text));
                    });
                }
            });
        }

        function performSearch() {            
                $.ajax({
                    url: '/Relocation/Search',
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify({
                        MinAVNumber: $('#MinimumAVNumber').val(),
                        MaxAVNumber: $('#MaximumAVNumber').val(),
                        SelectedFreezer: $('#FreezerSearch').val() || null,
                        SelectedTray: $('#TraySearch').val() || null
                    }),
                    success: function (data) {
                        $('#isolatesTable tbody').html(data);
                        $('#validationPanel').hide();
                        if ($.trim(data).length == 0) {
                            $('#divNewFreezer').hide();
                            $('#divNewTray').hide();
                            $('#isolatesTable').hide();
                            $('#noIsolatesMessage').show();
                        } else {
                            $('#divNewFreezer').show();
                            $('#divNewTray').show();
                            $('#isolatesTable').show();
                            $('#noIsolatesMessage').hide();
                            $('#NewFreezer').val('');
                             $('#NewTray').val('');
                        }
                    },
                    error: function (xhr) {
                    // Handle model validation errors returned by the server
                    if (xhr.status === 400) {
                        var errors = xhr.responseJSON;  // Get the errors from the response
                        var errorMessages = '';

                        // Iterate over the model state errors and create error messages
                        for (var field in errors) {
                            if (errors.hasOwnProperty(field)) {
                                var fieldErrors = errors[field];
                                fieldErrors.forEach(function (error) {
                                    errorMessages += '<span>' + error + '</span>';
                                });
                            }
                        }

                        // Display the error messages in a designated area
                        //$('#errorMessages').html(errorMessages).show(); // Make sure you have an element with id="errorMessages" in your HTML
                        $('#validationMessage').html(errorMessages);
                        $('#validationPanel').show();

                        // Optionally, you can hide/show specific divs based on the error state
                        $('#divNewFreezer').hide();
                        $('#divNewTray').hide();
                        $('#isolatesTable').hide();
                        $('#noIsolatesMessage').show();
                      }
                    }
                });
             }
         


        function saveRelocations() {           
            var selectedIsolates = [];
            $('.select-isolate:checked').each(function () {
                  selectedIsolates.push({
                    IsolatedId: $(this).data('id') || null,
                    Well: $(this).data('well') || null,
                    LastModified: $(this).data('lastmodified') || null
                  });
            });

            $.ajax({
                url: '/Relocation/Save',
                type: 'POST',
                data: {
                    SelectedNewIsolatedList: selectedIsolates || null,
                    SelectedNewFreezer: $('#NewFreezer').val() || null,
                    SelectedNewTray: $('#NewTray').val() || null
                },
                success: function (data) {
                    if (data.success) {
                        $('#updateMessage').show().delay(3000).fadeOut();                                             
                        $('#validationPanel').hide();
                        debugger;
                        performSearch();
                    } 
                },
                error: function (xhr) {
                // Handle model validation errors returned by the server
                    if (xhr.status === 400) {
                        var errors = xhr.responseJSON;  // Get the errors from the response
                        var errorMessages = '';

                        // Iterate over the model state errors and create error messages
                        for (var field in errors) {
                            if (errors.hasOwnProperty(field)) {
                                var fieldErrors = errors[field];
                                fieldErrors.forEach(function (error) {
                                    errorMessages += '<span>' + error + '</span>';
                                });
                            }
                        }
                        $('#validationMessage').html(errorMessages);
                        $('#validationPanel').show();                        
                        
                  }
                }
            });
        }        
    </script>
}