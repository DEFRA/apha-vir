name: build and sonar analyze template
on:
  workflow_call:
     inputs:
       dotnet_application_solution_name:
         description: "dotnet application solution name"
         required: true
         type: string
       environment:  
        description: "Optional environment name"
        required: false
        type: string  
   
     secrets:
       SONAR_TOKEN:
         required: true

jobs:
  build-and-sonar-analyze:
    name: build-and-sonar-analyze
    runs-on: windows-latest
    environment: ${{ inputs.environment || '' }} 
    permissions:
      id-token: write
      contents: read
    outputs:
      should_push: ${{ steps.check_commit.outputs.should_push }}
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: zulu
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}
          
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
          
      - name: Extract short SHA
        id: shortsha
        shell: pwsh
        run: |
          "shortsha=$($env:GITHUB_SHA.Substring(0, 8))" >> $env:GITHUB_OUTPUT

      - name: Check last commit message for 'ecrpush'
        id: check_commit
        shell: bash
        run: |
          COMMIT_MSG="$(git log -1 --pretty=%B)"
          echo "Last commit message: $COMMIT_MSG"
          if [[ "$COMMIT_MSG" == *"ecrpush"* ]]; then
            echo "should_push=true"
            echo "should_push=true" >> $GITHUB_OUTPUT
          else
            echo "should_push=false"
            echo "should_push=false" >> $GITHUB_OUTPUT
          fi
    
      - name: Start Sonar Analysis
        shell: pwsh
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # take the input and convert to lowercase & hyphen
          $solution_name = "${{ inputs.dotnet_application_solution_name }}"
          $project_key = "DEFRA_" + ($solution_name -replace '\.', '-').ToLower()
          Write-Host "Using SonarQube Project Key: $project_key"
          .\.sonar\scanner\dotnet-sonarscanner begin `
            /k:"$project_key" `
            /o:"defra" `
            /d:sonar.token="$env:SONAR_TOKEN" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /v:"${{ steps.imgtag.outputs.image_tag }}" `
            /d:sonar.cs.opencover.reportsPaths="src/TestResults/*.coverage.opencover.xml" `
            /d:sonar.cs.vstest.reportsPaths="src/TestResults/*.test_results.trx" `
            /d:sonar.branch.name="${{ github.ref_name }}" `
            /d:sonar.verbose=true `
            /d:sonar.exclusions="**/wwwroot/**" `
            /d:sonar.coverage.exclusions="**/wwwroot/**,**/*.cshtml,**/Interfaces/*.cs,**/*Map.cs,**/*Mapper.cs,**/Program.cs,**/Startup.cs,**/DTOs/*.cs,**/Entities/*.cs,**/Models/**/*.cs"

      - name: Restore NuGet packages
        shell: pwsh
        run: dotnet restore src/${{ inputs.dotnet_application_solution_name }}.sln
      - name: Build Solution
        shell: pwsh
        run: dotnet build src/${{ inputs.dotnet_application_solution_name }}.sln --configuration Release

      - name: Run Application Unit Tests with Coverage
        shell: bash
        run: |
          dotnet test src/${{ inputs.dotnet_application_solution_name }}/${{ inputs.dotnet_application_solution_name }}.Application.UnitTests/${{ inputs.dotnet_application_solution_name }}.Application.UnitTests.csproj \
            --no-build --configuration Release \
            -p:CollectCoverage=true \
            -p:CoverletOutput=$(pwd)/src/TestResults/${{ inputs.dotnet_application_solution_name }}.Application.coverage.opencover.xml \
            -p:CoverletOutputFormat=opencover \
            -p:Deterministic=true \
            -p:DebugType=full \
            -p:DebugSymbols=true \
            --logger "trx;LogFileName=$(pwd)/src/TestResults/${{ inputs.dotnet_application_solution_name }}.Application.test_results.trx"

      - name: Run Web Unit Tests with Coverage
        shell: bash
        run: |
          dotnet test src/${{ inputs.dotnet_application_solution_name }}/${{ inputs.dotnet_application_solution_name }}.Web.UnitTests/${{ inputs.dotnet_application_solution_name }}.Web.UnitTests.csproj \
            --no-build --configuration Release \
            -p:CollectCoverage=true \
            -p:CoverletOutput=$(pwd)/src/TestResults/${{ inputs.dotnet_application_solution_name }}.Web.coverage.opencover.xml \
            -p:CoverletOutputFormat=opencover \
            -p:Deterministic=true \
            -p:DebugType=full \
            -p:DebugSymbols=true \
            --logger "trx;LogFileName=$(pwd)/src/TestResults/${{ inputs.dotnet_application_solution_name }}.Web.test_results.trx"

      - name: Run DataAccess Unit Tests with Coverage
        shell: bash
        run: |
          dotnet test src/${{ inputs.dotnet_application_solution_name }}/${{ inputs.dotnet_application_solution_name }}.DataAccess.UnitTests/${{ inputs.dotnet_application_solution_name }}.DataAccess.UnitTests.csproj \
            --no-build --configuration Release \
            -p:CollectCoverage=true \
            -p:CoverletOutput=$(pwd)/src/TestResults/${{ inputs.dotnet_application_solution_name }}.DataAccess.coverage.opencover.xml \
            -p:CoverletOutputFormat=opencover \
            -p:Deterministic=true \
            -p:DebugType=full \
            -p:DebugSymbols=true \
            --logger "trx;LogFileName=$(pwd)/src/TestResults/${{ inputs.dotnet_application_solution_name }}.DataAccess.test_results.trx"
      


      - name: List coverage files
        shell: pwsh
        run: Get-ChildItem -Recurse -Filter "*.coverage.opencover.xml"; Get-ChildItem -Recurse -Filter "*.test_results.trx"
      - name: End Sonar Analysis
        shell: pwsh
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="$env:SONAR_TOKEN"
